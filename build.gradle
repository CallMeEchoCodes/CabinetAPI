plugins {
    id "java-library"
    id "fabric-loom" version "1.5-SNAPSHOT"
    id "maven-publish"
}

import net.fabricmc.loom.task.RemapJarTask

version = "${project.mod_version}+${stonecutter.current.version}"
group = project.maven_group
base {
    archivesName = project.archives_base_name
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

repositories {
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${stonecutter.current.version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation ("com.terraformersmc:modmenu:${project.modmenu_version}") {
        transitive = false
    }

    testmodImplementation sourceSets.main.output
}

if (stonecutter.current.active) { // run configs for non-active version would be invalid
    loom {
        runConfigs.all {
            ideConfigGenerated = true // generate IDE tasks for running client, server and testmod, datagen if those are present
            runDir "../../run" // use a global run directory for all versions
        }

        runs {
            create("testmodClient") {
                client()
                name = "TestMod Client"
                source sourceSets.testmod
            }

            create("testmodServer") {
                server()
                name = "TestMod Server"
                runDir = "../../run/server"
                source sourceSets.testmod
            }
        }
    }
}

loom {
    accessWidenerPath = file("../../src/main/resources/cabinetapi.accesswidener")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.properties.minecraft_target
    inputs.property "loader_version", project.properties.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": version,
                "minecraft_version": project.properties.minecraft_target,
                "loader_version": project.properties.loader_version
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    withSourcesJar()
    withJavadocJar()
}

task testmodJar(type: Jar) {
    group "build"
    from sourceSets.testmod.output
    archiveClassifier = "testmod-dev"
    destinationDirectory = project.file("build/devlibs")
}

task remapTestmodJar(type: RemapJarTask, dependsOn: testmodJar) {
    group "build"
    inputFile = testmodJar.archiveFile
    classpath.from sourceSets.testmod.compileClasspath
    archiveClassifier = "testmod"
}
build.dependsOn remapTestmodJar

jar {
    from("LICENSE") {
        rename { "${it}_${project.properties.archives_base_name}" }
    }
}

javadoc {
    options {
        source = "17"
        encoding = "UTF-8"
        charSet = "UTF-8"
        memberLevel = JavadocMemberLevel.PACKAGE
        (options as CoreJavadocOptions).addStringOption("Xdoclint:none", "-quiet")
    }
    classpath = sourceSets.main.compileClasspath
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.maven_group
            artifactId = project.archives_base_name
            version = version
            from components.java
        }
    }

    repositories {
        maven {
            name = "EchosMavenReleases"
            url = "https://maven.callmeecho.dev/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}